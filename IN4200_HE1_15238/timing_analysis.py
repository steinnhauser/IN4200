import numpy as np
import matplotlib.pyplot as plt

def main():
    """ Following times are conducted on the web-NotreDame.txt data 
    using the maximum amount of cores and top 6 webpages. """
    omp_times = [0.405, 0.393, 0.413, 0.437, 0.391, 0.447, 0.498, 0.438, 0.451, 0.479]
    reg_times = [0.381, 0.436, 0.466, 0.405, 0.470, 0.450, 0.505, 0.491, 0.483, 0.491]
    # plot(reg_times, omp_times)

    """ Calculated 50 times this time. Top 6 values. """
    reg = [0.379, 0.376, 0.376, 0.373, 0.371, 0.371, 0.371, 0.371, 0.370, 0.371, 0.372, 0.373, 0.374, 0.369, 0.370, 0.369, 0.371, 0.369, 0.369, 0.369, 0.369, 0.369, 0.369, 0.377, 0.374, 0.393, 0.373, 0.372, 0.374, 0.372, 0.373, 0.373, 0.370, 0.369, 0.380, 0.378, 0.374, 0.369, 0.369, 0.370, 0.371, 0.371, 0.371, 0.369, 0.369, 0.369, 0.370, 0.371, 0.371, 0.370]
    omp4 = [0.392, 0.461, 0.488, 0.486, 0.506, 0.466, 0.570, 0.526, 0.495, 0.505, 0.529, 0.526, 0.453, 0.460, 0.458, 0.525, 0.533, 0.474, 0.499, 0.482, 0.468, 0.473, 0.463, 0.487, 0.483, 0.484, 0.461, 0.461, 0.468, 0.463, 0.469, 0.472, 0.456, 0.470, 0.476, 0.478, 0.460, 0.464, 0.475, 0.464, 0.475, 0.480, 0.479, 0.485, 0.460, 0.472, 0.486, 0.482, 0.465, 0.526]
    omp3 = [0.415, 0.440, 0.428, 0.437, 0.425, 0.425, 0.430, 0.430, 0.430, 0.426, 0.431, 0.423, 0.425, 0.434, 0.443, 0.429, 0.437, 0.494, 0.455, 0.524, 0.562, 0.471, 0.477, 0.517, 0.517, 0.514, 0.488, 0.426, 0.430, 0.425, 0.430, 0.428, 0.429, 0.433, 0.425, 0.435, 0.432, 0.433, 0.455, 0.437, 0.436, 0.437, 0.433, 0.436, 0.430, 0.437, 0.429, 0.434, 0.432, 0.431]
    omp2 = [0.403, 0.414, 0.407, 0.402, 0.407, 0.406, 0.407, 0.406, 0.406, 0.398, 0.403, 0.404, 0.401, 0.407, 0.403, 0.398, 0.402, 0.399, 0.402, 0.399, 0.402, 0.399, 0.403, 0.398, 0.422, 0.410, 0.405, 0.400, 0.407, 0.410, 0.402, 0.402, 0.410, 0.406, 0.407, 0.406, 0.407, 0.410, 0.406, 0.410, 0.407, 0.407, 0.406, 0.406, 0.406, 0.402, 0.402, 0.407, 0.407, 0.402]
    omp1 = [0.406, 0.379, 0.373, 0.375, 0.374, 0.374, 0.375, 0.377, 0.376, 0.375, 0.374, 0.375, 0.379, 0.375, 0.375, 0.375, 0.373, 0.372, 0.372, 0.371, 0.372, 0.371, 0.374, 0.374, 0.390, 0.376, 0.375, 0.378, 0.375, 0.374, 0.372, 0.374, 0.372, 0.372, 0.375, 0.374, 0.374, 0.371, 0.371, 0.370, 0.370, 0.370, 0.370, 0.372, 0.375, 0.376, 0.375, 0.375, 0.375, 0.376]
    
    # plt.plot(reg, label = "Regular times")
    # plt.plot(omp4, label = "Parallel times, 4 nodes")
    # plt.plot(omp3, label = "Parallel times, 3 nodes")
    # plt.plot(omp2, label = "Parallel times, 2 nodes")
    # plt.plot(omp1, label = "Parallel times, 1 nodes")
    # plt.grid()
    # plt.legend()
    # plt.show()

    """ Calculate 100 times, top 100 values. """
    reg0 = [0.432, 0.429, 0.418, 0.423, 0.418, 0.419, 0.416, 0.417, 0.418, 0.422, 0.423, 0.416, 0.419, 0.424, 0.416, 0.420, 0.418, 0.418, 0.419, 0.419, 0.421, 0.419, 0.434, 0.419, 0.416, 0.415, 0.415, 0.417, 0.413, 0.416, 0.433, 0.418, 0.419, 0.417, 0.421, 0.426, 0.416, 0.413, 0.418, 0.419, 0.419, 0.426, 0.418, 0.431, 0.420, 0.420, 0.413, 0.413, 0.414, 0.416, 0.414, 0.415, 0.417, 0.420, 0.419, 0.419, 0.423, 0.471, 0.415, 0.415, 0.420, 0.414, 0.414, 0.419, 0.418, 0.418, 0.420, 0.420, 0.419, 0.419, 0.421, 0.414, 0.416, 0.414, 0.415, 0.416, 0.415, 0.422, 0.420, 0.415, 0.423, 0.414, 0.418, 0.419, 0.426, 0.426, 0.426, 0.423, 0.417, 0.419, 0.418, 0.420, 0.417, 0.418, 0.420, 0.417, 0.418, 0.422, 0.421, 0.419]
    omp4 = [0.498, 0.495, 0.514, 0.519, 0.522, 0.514, 0.510, 0.514, 0.527, 0.519, 0.511, 0.521, 0.516, 0.510, 0.509, 0.524, 0.518, 0.519, 0.522, 0.518, 0.523, 0.520, 0.522, 0.512, 0.519, 0.517, 0.519, 0.520, 0.520, 0.524, 0.523, 0.514, 0.521, 0.525, 0.525, 0.513, 0.519, 0.525, 0.514, 0.519, 0.521, 0.520, 0.516, 0.517, 0.517, 0.515, 0.513, 0.522, 0.515, 0.521, 0.518, 0.520, 0.527, 0.516, 0.510, 0.517, 0.516, 0.516, 0.516, 0.527, 0.512, 0.521, 0.524, 0.518, 0.515, 0.513, 0.525, 0.525, 0.512, 0.521, 0.526, 0.530, 0.514, 0.524, 0.520, 0.521, 0.518, 0.519, 0.511, 0.519, 0.512, 0.519, 0.514, 0.509, 0.520, 0.516, 0.519, 0.515, 0.522, 0.516, 0.513, 0.515, 0.519, 0.521, 0.526, 0.512, 0.515, 0.511, 0.513, 0.517]
    omp3 = [0.446, 0.501, 0.483, 0.492, 0.489, 0.488, 0.491, 0.489, 0.494, 0.495, 0.488, 0.486, 0.488, 0.489, 0.489, 0.481, 0.488, 0.489, 0.489, 0.481, 0.490, 0.489, 0.488, 0.482, 0.492, 0.491, 0.483, 0.493, 0.485, 0.492, 0.501, 0.490, 0.496, 0.488, 0.496, 0.493, 0.484, 0.493, 0.486, 0.487, 0.487, 0.487, 0.488, 0.490, 0.492, 0.487, 0.493, 0.487, 0.488, 0.489, 0.487, 0.494, 0.488, 0.481, 0.494, 0.488, 0.495, 0.480, 0.489, 0.487, 0.494, 0.491, 0.492, 0.488, 0.487, 0.493, 0.492, 0.489, 0.490, 0.492, 0.493, 0.510, 0.485, 0.493, 0.492, 0.495, 0.491, 0.489, 0.485, 0.492, 0.501, 0.484, 0.493, 0.485, 0.494, 0.489, 0.491, 0.485, 0.492, 0.486, 0.493, 0.485, 0.493, 0.491, 0.488, 0.490, 0.485, 0.493, 0.484, 0.492]
    omp2 = [0.436, 0.446, 0.442, 0.438, 0.438, 0.443, 0.438, 0.438, 0.438, 0.446, 0.438, 0.434, 0.434, 0.434, 0.439, 0.438, 0.438, 0.435, 0.439, 0.444, 0.443, 0.438, 0.434, 0.467, 0.434, 0.447, 0.439, 0.443, 0.437, 0.464, 0.439, 0.447, 0.439, 0.443, 0.450, 0.442, 0.438, 0.434, 0.442, 0.438, 0.438, 0.442, 0.442, 0.442, 0.442, 0.442, 0.442, 0.438, 0.434, 0.434, 0.434, 0.438, 0.434, 0.434, 0.438, 0.438, 0.446, 0.442, 0.438, 0.468, 0.435, 0.442, 0.442, 0.439, 0.439, 0.449, 0.446, 0.439, 0.435, 0.443, 0.435, 0.438, 0.438, 0.434, 0.438, 0.438, 0.434, 0.438, 0.446, 0.446, 0.434, 0.437, 0.434, 0.438, 0.442, 0.437, 0.434, 0.438, 0.434, 0.434, 0.443, 0.435, 0.439, 0.435, 0.434, 0.438, 0.434, 0.438, 0.449, 0.442]
    omp1 = [0.453, 0.424, 0.419, 0.420, 0.426, 0.426, 0.426, 0.425, 0.425, 0.420, 0.418, 0.424, 0.423, 0.425, 0.420, 0.425, 0.425, 0.425, 0.430, 0.428, 0.425, 0.446, 0.424, 0.423, 0.422, 0.429, 0.421, 0.420, 0.419, 0.418, 0.420, 0.421, 0.422, 0.423, 0.422, 0.425, 0.425, 0.427, 0.420, 0.418, 0.419, 0.420, 0.426, 0.425, 0.424, 0.420, 0.428, 0.429, 0.422, 0.423, 0.422, 0.429, 0.428, 0.421, 0.420, 0.420, 0.433, 0.425, 0.420, 0.420, 0.428, 0.424, 0.419, 0.419, 0.427, 0.421, 0.425, 0.420, 0.426, 0.424, 0.421, 0.420, 0.423, 0.423, 0.424, 0.424, 0.420, 0.419, 0.448, 0.425, 0.425, 0.419, 0.421, 0.426, 0.419, 0.430, 0.438, 0.424, 0.425, 0.424, 0.421, 0.420, 0.419, 0.419, 0.421, 0.420, 0.421, 0.420, 0.420, 0.425]
    plt.plot(reg0, label = "Regular times")
    plt.plot(omp4, label = "Parallel times, 4 nodes")
    plt.plot(omp3, label = "Parallel times, 3 nodes")
    plt.plot(omp2, label = "Parallel times, 2 nodes")
    plt.plot(omp1, label = "Parallel times, 1 nodes")
    plt.grid()
    plt.legend()
    plt.show()

    return 0

def plot(x1, x2):
    """ Function to plot arrays x1 and x2 together. """
    plt.plot(x1, label = "Regular times")
    plt.plot(x2, label = "Parallel times")
    plt.grid()
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()
    