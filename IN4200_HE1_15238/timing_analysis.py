import numpy as np
import matplotlib.pyplot as plt

def main():

    """ Calculate 100 times, top 100 values. """
    reg0 = np.array([0.432, 0.429, 0.418, 0.423, 0.418, 0.419, 0.416, 0.417, 0.418, 0.422, 0.423, 0.416, 0.419, 0.424, 0.416, 0.420, 0.418, 0.418, 0.419, 0.419, 0.421, 0.419, 0.434, 0.419, 0.416, 0.415, 0.415, 0.417, 0.413, 0.416, 0.433, 0.418, 0.419, 0.417, 0.421, 0.426, 0.416, 0.413, 0.418, 0.419, 0.419, 0.426, 0.418, 0.431, 0.420, 0.420, 0.413, 0.413, 0.414, 0.416, 0.414, 0.415, 0.417, 0.420, 0.419, 0.419, 0.423, 0.471, 0.415, 0.415, 0.420, 0.414, 0.414, 0.419, 0.418, 0.418, 0.420, 0.420, 0.419, 0.419, 0.421, 0.414, 0.416, 0.414, 0.415, 0.416, 0.415, 0.422, 0.420, 0.415, 0.423, 0.414, 0.418, 0.419, 0.426, 0.426, 0.426, 0.423, 0.417, 0.419, 0.418, 0.420, 0.417, 0.418, 0.420, 0.417, 0.418, 0.422, 0.421, 0.419])
    omp4 = np.array([0.498, 0.495, 0.514, 0.519, 0.522, 0.514, 0.510, 0.514, 0.527, 0.519, 0.511, 0.521, 0.516, 0.510, 0.509, 0.524, 0.518, 0.519, 0.522, 0.518, 0.523, 0.520, 0.522, 0.512, 0.519, 0.517, 0.519, 0.520, 0.520, 0.524, 0.523, 0.514, 0.521, 0.525, 0.525, 0.513, 0.519, 0.525, 0.514, 0.519, 0.521, 0.520, 0.516, 0.517, 0.517, 0.515, 0.513, 0.522, 0.515, 0.521, 0.518, 0.520, 0.527, 0.516, 0.510, 0.517, 0.516, 0.516, 0.516, 0.527, 0.512, 0.521, 0.524, 0.518, 0.515, 0.513, 0.525, 0.525, 0.512, 0.521, 0.526, 0.530, 0.514, 0.524, 0.520, 0.521, 0.518, 0.519, 0.511, 0.519, 0.512, 0.519, 0.514, 0.509, 0.520, 0.516, 0.519, 0.515, 0.522, 0.516, 0.513, 0.515, 0.519, 0.521, 0.526, 0.512, 0.515, 0.511, 0.513, 0.517])
    omp3 = np.array([0.446, 0.501, 0.483, 0.492, 0.489, 0.488, 0.491, 0.489, 0.494, 0.495, 0.488, 0.486, 0.488, 0.489, 0.489, 0.481, 0.488, 0.489, 0.489, 0.481, 0.490, 0.489, 0.488, 0.482, 0.492, 0.491, 0.483, 0.493, 0.485, 0.492, 0.501, 0.490, 0.496, 0.488, 0.496, 0.493, 0.484, 0.493, 0.486, 0.487, 0.487, 0.487, 0.488, 0.490, 0.492, 0.487, 0.493, 0.487, 0.488, 0.489, 0.487, 0.494, 0.488, 0.481, 0.494, 0.488, 0.495, 0.480, 0.489, 0.487, 0.494, 0.491, 0.492, 0.488, 0.487, 0.493, 0.492, 0.489, 0.490, 0.492, 0.493, 0.510, 0.485, 0.493, 0.492, 0.495, 0.491, 0.489, 0.485, 0.492, 0.501, 0.484, 0.493, 0.485, 0.494, 0.489, 0.491, 0.485, 0.492, 0.486, 0.493, 0.485, 0.493, 0.491, 0.488, 0.490, 0.485, 0.493, 0.484, 0.492])
    omp2 = np.array([0.436, 0.446, 0.442, 0.438, 0.438, 0.443, 0.438, 0.438, 0.438, 0.446, 0.438, 0.434, 0.434, 0.434, 0.439, 0.438, 0.438, 0.435, 0.439, 0.444, 0.443, 0.438, 0.434, 0.467, 0.434, 0.447, 0.439, 0.443, 0.437, 0.464, 0.439, 0.447, 0.439, 0.443, 0.450, 0.442, 0.438, 0.434, 0.442, 0.438, 0.438, 0.442, 0.442, 0.442, 0.442, 0.442, 0.442, 0.438, 0.434, 0.434, 0.434, 0.438, 0.434, 0.434, 0.438, 0.438, 0.446, 0.442, 0.438, 0.468, 0.435, 0.442, 0.442, 0.439, 0.439, 0.449, 0.446, 0.439, 0.435, 0.443, 0.435, 0.438, 0.438, 0.434, 0.438, 0.438, 0.434, 0.438, 0.446, 0.446, 0.434, 0.437, 0.434, 0.438, 0.442, 0.437, 0.434, 0.438, 0.434, 0.434, 0.443, 0.435, 0.439, 0.435, 0.434, 0.438, 0.434, 0.438, 0.449, 0.442])
    omp1 = np.array([0.453, 0.424, 0.419, 0.420, 0.426, 0.426, 0.426, 0.425, 0.425, 0.420, 0.418, 0.424, 0.423, 0.425, 0.420, 0.425, 0.425, 0.425, 0.430, 0.428, 0.425, 0.446, 0.424, 0.423, 0.422, 0.429, 0.421, 0.420, 0.419, 0.418, 0.420, 0.421, 0.422, 0.423, 0.422, 0.425, 0.425, 0.427, 0.420, 0.418, 0.419, 0.420, 0.426, 0.425, 0.424, 0.420, 0.428, 0.429, 0.422, 0.423, 0.422, 0.429, 0.428, 0.421, 0.420, 0.420, 0.433, 0.425, 0.420, 0.420, 0.428, 0.424, 0.419, 0.419, 0.427, 0.421, 0.425, 0.420, 0.426, 0.424, 0.421, 0.420, 0.423, 0.423, 0.424, 0.424, 0.420, 0.419, 0.448, 0.425, 0.425, 0.419, 0.421, 0.426, 0.419, 0.430, 0.438, 0.424, 0.425, 0.424, 0.421, 0.420, 0.419, 0.419, 0.421, 0.420, 0.421, 0.420, 0.420, 0.425])
    plt.plot(reg0, label = "Regular times")
    plt.plot(omp4, label = "Parallel times, 4 nodes")
    plt.plot(omp3, label = "Parallel times, 3 nodes")
    plt.plot(omp2, label = "Parallel times, 2 nodes")
    plt.plot(omp1, label = "Parallel times, 1 nodes")
    plt.grid()
    plt.legend()
    plt.ylabel("Time [s]")
    plt.xlabel("Run no.")
    plt.title("Time taken of 100 distinct runs of the \nweb-NotreDame.txt file analysis on a regular computer")
    plt.show()

    """ 100 times, top 100. At CCSE machine. """
    ompccse8 = np.array([0.272, 0.262, 0.272, 0.273, 0.250, 0.271, 0.269, 0.271, 0.271, 0.270, 0.273, 0.271, 0.272, 0.250, 0.273, 0.268, 0.272, 0.270, 0.272, 0.272, 0.270, 0.250, 0.271, 0.271, 0.271, 0.268, 0.271, 0.270, 0.272, 0.268, 0.272, 0.272, 0.250, 0.271, 0.270, 0.269, 0.271, 0.272, 0.272, 0.271, 0.251, 0.250, 0.271, 0.271, 0.271, 0.270, 0.271, 0.271, 0.271, 0.251, 0.271, 0.271, 0.271, 0.271, 0.271, 0.272, 0.273, 0.248, 0.270, 0.272, 0.271, 0.272, 0.271, 0.271, 0.272, 0.248, 0.272, 0.273, 0.272, 0.270, 0.271, 0.270, 0.269, 0.272, 0.271, 0.250, 0.270, 0.270, 0.273, 0.269, 0.271, 0.271, 0.271, 0.272, 0.250, 0.273, 0.268, 0.273, 0.270, 0.269, 0.272, 0.271, 0.272, 0.247, 0.274, 0.271, 0.270, 0.271, 0.269, 0.272])
    regccse0 = np.array([0.223, 0.217, 0.216, 0.211, 0.211, 0.213, 0.215, 0.217, 0.217, 0.216, 0.212, 0.215, 0.216, 0.214, 0.213, 0.216, 0.216, 0.212, 0.215, 0.212, 0.217, 0.216, 0.215, 0.215, 0.212, 0.212, 0.212, 0.211, 0.213, 0.212, 0.216, 0.217, 0.214, 0.217, 0.217, 0.217, 0.217, 0.215, 0.217, 0.216, 0.217, 0.218, 0.217, 0.217, 0.217, 0.217, 0.216, 0.217, 0.218, 0.217, 0.219, 0.216, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.214, 0.216, 0.213, 0.216, 0.212, 0.212, 0.212, 0.212, 0.211, 0.217, 0.217, 0.217, 0.213, 0.212, 0.212, 0.212, 0.212, 0.212, 0.217, 0.216, 0.215, 0.214, 0.212, 0.217, 0.217, 0.217, 0.213, 0.216, 0.217, 0.217, 0.220, 0.216, 0.216, 0.214, 0.212, 0.212, 0.212, 0.217, 0.217, 0.218, 0.213, 0.216])
    ompccse4 = np.array([0.224, 0.229, 0.233, 0.232, 0.233, 0.239, 0.233, 0.232, 0.232, 0.233, 0.233, 0.233, 0.233, 0.244, 0.232, 0.238, 0.230, 0.231, 0.232, 0.234, 0.242, 0.233, 0.232, 0.233, 0.233, 0.230, 0.247, 0.233, 0.232, 0.237, 0.233, 0.236, 0.233, 0.233, 0.231, 0.233, 0.233, 0.239, 0.232, 0.231, 0.243, 0.229, 0.239, 0.232, 0.233, 0.233, 0.233, 0.232, 0.239, 0.232, 0.231, 0.240, 0.233, 0.229, 0.233, 0.233, 0.233, 0.233, 0.243, 0.233, 0.233, 0.231, 0.232, 0.232, 0.240, 0.232, 0.233, 0.239, 0.228, 0.232, 0.233, 0.233, 0.243, 0.232, 0.231, 0.233, 0.233, 0.232, 0.241, 0.231, 0.235, 0.233, 0.239, 0.245, 0.232, 0.234, 0.232, 0.232, 0.240, 0.234, 0.245, 0.233, 0.239, 0.229, 0.239, 0.233, 0.235, 0.234, 0.232, 0.233])
    ompccse2 = np.array([0.222, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.231, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.231, 0.227, 0.227, 0.227, 0.227, 0.231, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.231, 0.227, 0.227, 0.227, 0.231, 0.227, 0.227, 0.231, 0.227, 0.227, 0.227, 0.231, 0.231, 0.227, 0.231, 0.231, 0.227, 0.231, 0.231, 0.231, 0.231, 0.235, 0.231, 0.231, 0.223, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.235, 0.227, 0.231, 0.231, 0.231, 0.231, 0.235, 0.231, 0.231, 0.227, 0.231, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.231, 0.223, 0.231, 0.223, 0.231, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227])
    plt.plot(regccse0, label = "Regular times")
    plt.plot(ompccse8, label = "Parallel times, 8 nodes")
    plt.plot(ompccse4, label = "Parallel times, 4 nodes")
    plt.plot(ompccse2, label = "Parallel times, 2 nodes")
    plt.grid()
    plt.legend()
    plt.ylabel("Time [s]")
    plt.xlabel("Run no.")
    plt.title("Time taken of 100 distinct runs of the \nweb-NotreDame.txt file analysis on a more powerful computer")
    plt.show()

    print("Regular computer (4 cores) results:")
    print(f"\t1 Node: Mean {np.mean(reg0):.3f}s, Standard Deviation = {np.std(reg0):.3f}s")
    print(f"\t1 Node paralllelized: Mean {np.mean(omp1):.3f}s, Standard Deviation = {np.std(omp1):.3f}s")
    print(f"\t2 Nodes: Mean {np.mean(omp2):.3f}s, Standard Deviation = {np.std(omp2):.3f}s")
    print(f"\t3 Nodes: Mean {np.mean(omp3):.3f}s, Standard Deviation = {np.std(omp3):.3f}s")
    print(f"\t4 Nodes: Mean {np.mean(omp4):.3f}s, Standard Deviation = {np.std(omp4):.3f}s")
    print("More powerful computer (8 cores) results:")
    print(f"\t1 Node: Mean {np.mean(regccse0):.3f}s, Standard Deviation = {np.std(regccse0):.3f}s")
    print(f"\t2 Node: Mean {np.mean(ompccse2):.3f}s, Standard Deviation = {np.std(ompccse2):.3f}s")
    print(f"\t4 Node: Mean {np.mean(ompccse4):.3f}s, Standard Deviation = {np.std(ompccse4):.3f}s")
    print(f"\t8 Node: Mean {np.mean(ompccse8):.3f}s, Standard Deviation = {np.std(ompccse8):.3f}s")
    return 0


if __name__ == "__main__":
    main()
    